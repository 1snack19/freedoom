#!/usr/bin/env python
#
# Copyright (c) 2011, 2012
# Contributors to the Freedoom project.  All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#  * Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#  * Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#  * Neither the name of the freedoom project nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
# PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

from instrument import NullInstrument
import struct
import sys

GENMIDI_HEADER = "#OPL_II#"

FLAG_FIXED_PITCH = 0x0001
FLAG_TWO_VOICE   = 0x0004

KSL_MASK = 0xc0
VOLUME_MASK = 0x3f

# Order of fields in GENMIDI data structures.

GENMIDI_FIELDS = [
        "m_am_vibrato_eg",
        "m_attack_decay",
        "m_sustain_release",
        "m_waveform",
        "m_ksl",
	"m_volume",
        "feedback_fm",
        "c_am_vibrato_eg",
        "c_attack_decay",
        "c_sustain_release",
        "c_waveform",
        "c_ksl",
	"c_volume",
	"null",
	"note_offset"
]

# Encode a single voice of an instrument to binary.

def encode_voice(data, offset):
	result = dict(data)

	result["m_ksl"] = data["m_ksl_volume"] & KSL_MASK
	result["m_volume"] = data["m_ksl_volume"] & VOLUME_MASK
	result["c_ksl"] = data["c_ksl_volume"] & KSL_MASK
	result["c_volume"] = data["c_ksl_volume"] & VOLUME_MASK

	result["null"] = 0
	result["note_offset"] = offset

	return struct.pack("<BBBBBBBBBBBBBBh",
	                   *map(lambda key: result[key], GENMIDI_FIELDS))

# Encode an instrument to binary.

def encode_instrument(instrument):
	flags = 0

	instr1_data = encode_voice(instrument.voice1, instrument.offset1)

	if instrument.voice2 is not None:
		flags |= FLAG_TWO_VOICE
		instr2_data = encode_voice(instrument.voice2,
		                           instrument.offset2)
	else:
		instr2_data = encode_voice(NullInstrument.voice1, 0)

	if instrument.fixed_note is not None:
		flags |= FLAG_FIXED_PITCH
		fixed_note = instrument.fixed_note
	else:
		fixed_note = 0

	header = struct.pack("<hBB", flags, 128, fixed_note)

	return header + instr1_data + instr2_data

def encode_instruments():
	result = []

	for instrument in INSTRUMENTS + PERCUSSION:
		result.append(encode_instrument(instrument))

	return b"".join(result)

def encode_instrument_names():
	result = []

	for instrument in INSTRUMENTS + PERCUSSION:
		result.append(struct.pack("32s", instrument.voice1["name"]))

	return b"".join(result)

def encode_genmidi():
	header = struct.pack("%is" % len(GENMIDI_HEADER), GENMIDI_HEADER)

	return header + encode_instruments() + encode_instrument_names()

if len(sys.argv) != 2:
	print >> sys.stderr, "Usage: %s <filename>" % sys.argv[0]
	sys.exit(-1)

from config import INSTRUMENTS, PERCUSSION

f = open(sys.argv[1], "w")
f.write(encode_genmidi())
f.close()

